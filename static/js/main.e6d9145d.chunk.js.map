{"version":3,"sources":["utils/api.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","App","React","useState","memes","setMemes","useEffect","subreddit","get","getMemes","then","data","console","log","children","map","post","preview","images","source","url","className","title","height","src","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAMA,G,MAAQC,EAAQ,K,WCkCPC,MA9Bf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,KASb,OAPAH,IAAMI,WAAU,YDGX,WAAwC,IAAtBC,EAAqB,uDAAT,QACjC,OAAOR,EAAMS,IAAN,mCAAsCD,EAAtC,eCHPE,GAAWC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACjBC,QAAQC,IAAIF,EAAKA,KAAKG,SAASC,KAAI,SAACC,GAAU,OAAOA,EAAKL,KAAKM,QAAQC,OAAO,GAAGC,OAAOC,QACxFf,EAASM,EAAKA,KAAKG,eAEpB,IAGD,qBAAKO,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,mEACA,6BAEIjB,EAAMW,KAAI,SAACC,GAAD,OACR,6BACE,gCACE,6BAAKA,EAAKL,KAAKW,QACf,qBAAKC,OAAO,MAAMC,IAAKR,EAAKL,KAAKM,QAAQC,OAAO,GAAGC,OAAOC,IAAIK,QAAQ,QAAS,uBCXlFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e6d9145d.chunk.js","sourcesContent":["const axios = require('axios')\n\n// const r = new Snoowrap({\n//     userAgent: process.env.REDDIT_USER_AGENT,\n//     clientId: process.env.REDDIT_CLIENT_ID,\n//     clientSecret: process.env.REDDIT_CLIENT_SECRET,\n//     refreshToken: process.env.REDDIT_REFRESH_TOKEN\n// })\n\nexport function getMemes(subreddit = 'memes') {\n    return axios.get(`https://www.reddit.com/r/${subreddit}/hot.json`)\n}","import './App.css';\nimport { getMemes } from './utils/api';\nimport React from 'react';\n\nfunction App() {\n  const [memes, setMemes] = React.useState([])\n  React.useEffect(() => {\n    getMemes().then(({ data }) => {\n      console.log(data.data.children.map((post) => {return post.data.preview.images[0].source.url}))\n      setMemes(data.data.children)\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>13 Memes for 13 Years of Survival</h1>\n        <ul>\n          {\n            memes.map((post) => (\n              <li>\n                <div>\n                  <h5>{post.data.title}</h5>\n                  <img height=\"250\" src={post.data.preview.images[0].source.url.replace('&amp;', '&')}/>\n                </div>\n              </li>\n            ))\n          }\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}